trigger leadDuplicatePreventer on Lead (before insert, before update,after insert) {
    if(trigger.isBefore){
	Map<String, Lead> leadMap = new Map<String, Lead>();

	for (Lead lead : Trigger.new) {
	
		/* Make sure we don't treat an email address that
		   isn't changing during an update as a duplicate. */
		if ((lead.Email != null) && (Trigger.isInsert || (lead.Email != Trigger.oldMap.get(lead.Id).Email))) {
	
			// Make sure another new lead isn't also a duplicate
			if (leadMap.containsKey(lead.Email)) {
				lead.Email.addError('Another new lead has the same email address.');
			} else {
				leadMap.put(lead.Email, lead);
			}
		}
	}
	
	/* Using a single database query, find all the leads in
	   the database that have the same email address as any
	   of the leads being inserted or updated. */
	for (Lead lead : [SELECT Email FROM Lead WHERE Email IN :leadMap.KeySet()]) {
		Lead newLead = leadMap.get(lead.Email);
		newLead.Email.addError('A lead with this email address already exists.');
	}
    }
    else if(Trigger.isAfter)
    {
       List<Task> tasklist = new List<Task>();
        
        for(Lead lead:Trigger.new){
            Task task = new task();
            task.whoId = lead.Id;
            task.Description = 'Call this lead';
            task.priority = 'High';
            task.Status = 'Not Started';
            task.ReminderDateTime = System.now().addDays(2);
            task.Subject = 'New Lead';
            tasklist.add(task);  
        }
	    insert tasklist;    
    }
}

@isTest
public class leadDupPreventerTest {

    @isTest static void LeadInsertTest(){
        Lead l = new Lead(firstname = 'Henry',LastName ='Joe',Company ='Google',Email='john@doe.com');
        try {
        Test.startTest();
        insert l;
        Lead lCloneCopy  = l.clone(false, false, false, false);
		insert lCloneCopy;
      	}
        catch(Exception error) {
        System.assert(error.getMessage().contains('Insert failed.'));
        System.assert(error.getMessage().contains('FIELD_CUSTOM_VALIDATION_EXCEPTION'));
        System.assert(error.getMessage().contains('A lead with this email address already exists.'));
		}	
       
       Lead lead = new Lead(firstname = 'Jane',LastName ='Dow',Company ='ABME',Email='jane@doe.com'); 
        insert lead;
        Test.stopTest();
       Task task = [Select id,Description,Subject from Task where whoId = :lead.id];
       System.assertEquals('Call this lead',task.Description);
        System.assertEquals('New Lead', task.Subject);
		}
}
